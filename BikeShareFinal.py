# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CR7J0jUhEKa2CaFofMvtp2YrBPvlRJl3
"""

import time
import pandas as pd
import numpy as np
#Please replace the directory of the files with your data source directory for three datasets chicago , new york city and washington
CITY_DATA = { 'chicago': 'D:/UDACITY/chicago.csv',
              'new york city': 'D:/UDACITY/new_york_city.csv',
              'washington': 'D:/UDACITY/washington.csv'}

def get_filters():
    """
    Asks user to specify a city, month, and day to analyze.

    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    """
    print('Hello! Let\'s explore some US bikeshare data!')
    # TO DO: get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs
    while True:

        city = input("Would you like to see the data for chicago, new york city or washington? ").lower()
        if city in ['chicago', 'washington', 'new york city']:
          break
        else :
          print("your asnwer is out of options or not correctly writting , please see options in question")
          continue


    # TO DO: get user input for month (all, january, february, ... , june)
    months = ['january', 'february', 'march', 'april', 'may', 'june']
    days= [1,2,3,4,5,6,7]

    while True:
      try :
        time_filter = input("Would you like to filter the data by month ,day , both , or not at all? type 'none' for no time filter ").lower()

        if time_filter =='both':
          month = input("which month? january, february, march, april, may or june?Plesae type out the full month name ").lower()
          day= int(input("which day of week ? Please type your response as integer (e.g. 1 = Sunday ) "))
          if month in months and day in days:
            break
          else:
            print("your asnwer is out of options or not correctly writting , please see options in question")


        elif time_filter == 'month':
          month = input("which month? january, february, march, april, may or june? ").lower()
          day="all"
          if month in months:
            break
          else :
            print("your asnwer is out of options or not correctly writting, please see options in question")

        elif time_filter =='day':
          day= int(input("which day of week ? Please type your response as integer (e.g. 1 = Sunday ) "))
          month ='all'
          if day  in days:
            break
          else :
            print("your asnwer is out of options or not correctly writting , please see options in question")

        elif time_filter =='none':
          month="all"
          day="all"
          break

        else :
          print("your asnwer is out of options or not correctly writting , please see options in question")
          continue

      except :
        print("your asnwer is out of options or not correctly writting, please see options in question")





    print('-'*40)
    return city, month, day





def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """
    # load data file into a dataframe
    df = pd.read_csv(CITY_DATA[city])
    # convert the Start Time column to datetime
    df['Start Time'] = pd.to_datetime(df['Start Time'])
    # extract month and day of week from Start Time to create new columns
    df['month'] = df['Start Time'].dt.month
    df['day_of_week'] =df['Start Time'].dt.day_name()
    # filter by month if applicable
    if month != 'all':
        # use the index of the months list to get the corresponding int
        months = ['january', 'february', 'march', 'april', 'may', 'june']
        month = months.index(month)


        # filter by month to create the new dataframe
        df = df[df['month'] ==( month+1)]
    # filter by day of week if applicable
    if day != 'all':
      days = {7:'Saturday',1: 'Sunday',2:'Monday',3: 'Tuesday',4: 'Wednesday',5: 'Thursday',6: 'Friday'}
      day= days[day]
        # filter by day of week to create the new dataframe
      df = df[df['day_of_week']==day.title()]

    return df


def time_stats(df):
    """Displays statistics on the most frequent times of travel."""

    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()
    # TO DO: display the most common month
    common_month = df['month'].mode().tolist()[0]
    count_month =  df['month'].value_counts().max()
    print('The most common month is:',common_month ,', Count: ',count_month )

    # TO DO: display the most common day of week
    common_day_of_week = df['day_of_week'].mode().tolist()[0]
    count_day_of_week =  df['day_of_week'].value_counts().max()
    print('The most common day of week is:', common_day_of_week ,', Count: ',count_day_of_week )

    # TO DO: display the most common start hour
    df_hour = df['Start Time'].dt.hour
    common_hour = df_hour.mode().tolist()[0]
    count_hour =  df_hour.value_counts().max()
    print('The most common hour is:', common_hour,', Count: ',count_hour)


    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def station_stats(df):
    """Displays statistics on the most popular stations and trip."""

    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()

    # TO DO: display most commonly used start station
    common_start_station = df['Start Station'].value_counts()
    print('The most popular _Start station_ is:',common_start_station.index.tolist()[0],', count: ',common_start_station.max())

    # TO DO: display most commonly used end station
    common_end_station = df['End Station'].value_counts()
    print('The most popular _End station_ is:',common_end_station.index.tolist()[0],', count: ',common_end_station.max())

    # TO DO: display most frequent combination of start station and end station trip

    df_combin_end_start_station = df['Start Station'] + ' >>>> '+ df['End Station']
    common_combination= df_combin_end_start_station.value_counts()
    print('The most frequent combination of start station and end station trip:',common_combination.index.tolist()[0],', count: ',common_combination.max())

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""

    print('\nCalculating Trip Duration...\n')
    start_time = time.time()

    # TO DO: display total travel time
    print('Total travel time is:', df['Trip Duration'].sum() ,', count:',df['Trip Duration'].count())


    # TO DO: display mean travel time
    print('The average travel time is:', round(df['Trip Duration'].mean(),2))

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def user_stats(df):
    """Displays statistics on bikeshare users."""

    print('\nCalculating User Stats...\n')
    start_time = time.time()

    # TO DO: Display counts of user types
    print('below user types:')
    user_types = df['User Type'].value_counts()
    for i,x  in user_types.items():
        print('  ',i,x)

    try :
      # TO DO: Display counts of gender
      print('\nBelow gender counts:')
      gender_count = df['Gender'].value_counts()
      for z,y in gender_count.items():
        print('  ',z,y)

    except:
      print("No birth year data to share")

    try :
      # TO DO: Display earliest, most recent, and most common year of birth
      print('\nBelow year of birth information:')
      print('   Earliest year of birth:',int(df['Birth Year'].min()),'\n   Most recent year of birth:',int(df['Birth Year'].max()),'\n   Most common year of birth:',int(df['Birth Year'].mode().tolist()[0]) )

    except:
      print("No gender data to share ")

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def show_data_five_five(df):
  dic_df = df.to_dict(orient='records')
  show_data ='yes'
  i=0
  while i<(len(dic_df)-5):
     if show_data =='yes':
       for m in range(i,i+5,1):
         print(dic_df[m])
       i+=5
       show_data= input('\nWould like to see 5 more rows of the data ? Enter yes or no.\n ').lower()
     else:
        break


def main():
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)

        time_stats(df)
        #x=input('Press any button to display the next statistics[Station]')
        station_stats(df)
        #x=input('Press any button to display the next statistics [Trip Duration]')
        trip_duration_stats(df)
        #x=input('Press any button to display the next statistics [User]')
        user_stats(df)

        show_data= input('\nWould you like to view individual trip data ? Enter yes or no.\n').lower()
        if show_data in ['yes','y']:
          show_data_five_five(df)


        restart = input('\nWould you like to restart? Enter yes or no.\n ')
        if restart.lower() != 'yes':
          break
        #print(df)

if __name__ == "__main__":


	main()